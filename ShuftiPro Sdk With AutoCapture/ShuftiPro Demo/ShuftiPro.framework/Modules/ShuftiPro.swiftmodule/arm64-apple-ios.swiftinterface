// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name ShuftiPro
import AVFoundation
import AVKit
import Accelerate
import CoreGraphics
import CoreVideo
import Foundation
import MLKit
import MessageUI
@_exported import ShuftiPro
import Swift
import SystemConfiguration
import TensorFlowLite
import UIKit
import VideoToolbox
import Vision
import WebKit
import _Concurrency
public struct NumericPluralArg<Number> : ShuftiPro.PluralArg where Number : Swift.CVarArg, Number : Swift.Numeric {
  public let value: Foundation.NSNumber
  public var arg: Swift.CVarArg {
    get
  }
  public var convertedArg: Swift.CVarArg {
    get
  }
  public init?(arg: Number, converting: @escaping (_ arg: Number) -> Swift.CVarArg = { $0 })
}
public protocol Localizable {
  func l10n() -> Swift.String
  func l10n(_ instance: ShuftiPro.L10n) -> Swift.String
}
extension ShuftiPro.Localizable {
  public func l10n() -> Swift.String
}
extension ShuftiPro.L10n : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension UIKit.UIBarItem : ShuftiPro.IBL10n {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var l10nTitle: Swift.String {
    @objc get
    @objc set(newValue)
  }
}
extension ShuftiPro.L10n {
  public static var shared: ShuftiPro.L10n
  public static var preferredLanguage: Swift.String {
    get
    set(newValue)
  }
  public static var supportedLanguages: [Swift.String] {
    get
  }
}
extension Foundation.NSNumber : ShuftiPro.NumericLocalizable, ShuftiPro.NSNumberRepresentable {
  public func asNSNumber() -> Foundation.NSNumber
  public func l10n(_ instance: ShuftiPro.L10n) -> Swift.String
  public func l10n(_ instance: ShuftiPro.L10n = .shared, closure: (_ formatter: Foundation.NumberFormatter) -> Swift.Void) -> Swift.String
}
extension UIKit.UISegmentedControl : ShuftiPro.IBL10n {
}
open class L10n {
  public var preferredLanguage: Swift.String {
    get
  }
  public var supportedLanguages: [Swift.String] {
    get
  }
  public var logger: ShuftiPro.Logger?
  public var configuration: ShuftiPro.LocalizedStringsConfiguration
  public var language: Swift.String {
    get
    set(newValue)
  }
  public var locale: Foundation.Locale? {
    get
  }
  public var bundles: [Foundation.Bundle] {
    get
  }
  public init(bundle: Foundation.Bundle = .main, language: Swift.String? = nil, configuration: ShuftiPro.LocalizedStringsConfiguration = .shared)
  public func string(format: Swift.String, _ args: Swift.CVarArg...) -> Swift.String
  open func string(format: Swift.String, args: [Swift.CVarArg]) -> Swift.String
  open func string(for key: Swift.String, resource: Swift.String? = nil, fittingWidth: Swift.Int? = nil) -> Swift.String
  public func plural(for key: Swift.String, resource: Swift.String? = nil, fittingWidth: Swift.Int? = nil, _ arg: Swift.CVarArg) -> Swift.String
  open func plural(for key: Swift.String, resource: Swift.String? = nil, fittingWidth: Swift.Int? = nil, args: [Swift.CVarArg]) -> Swift.String
  open func inject(dictionary: [Swift.String : Any], into resource: Swift.String? = nil)
  @objc deinit
}
extension ShuftiPro.L10n {
  @available(*, deprecated, renamed: "plural(for:resource:fittingWidth:_:)")
  open func plural<Number>(for key: Swift.String, resource: Swift.String? = nil, fittingWidth: Swift.Int? = nil, arg: Number, converting: @escaping (_ number: Number) -> Swift.CVarArg = { $0 }) -> Swift.String where Number : Swift.CVarArg, Number : Swift.Numeric
}
extension Foundation.NSNotification.Name {
  public static var L10nLanguageChanged: Foundation.Notification.Name
}
public protocol NSNumberRepresentable {
  func asNSNumber() -> Foundation.NSNumber
}
public protocol NumericLocalizable : ShuftiPro.Localizable {
  func l10n(_ instance: ShuftiPro.L10n, closure: (_ formatter: Foundation.NumberFormatter) -> Swift.Void) -> Swift.String
}
extension ShuftiPro.NumericLocalizable {
  public func l10n(_ instance: ShuftiPro.L10n) -> Swift.String
}
extension ShuftiPro.NumericLocalizable where Self : ShuftiPro.NSNumberRepresentable {
  public func l10n(_ instance: ShuftiPro.L10n = .shared, closure: (_ formatter: Foundation.NumberFormatter) -> Swift.Void) -> Swift.String
}
public protocol IntegerLocalizable : ShuftiPro.NumericLocalizable {
}
extension ShuftiPro.IntegerLocalizable {
  public func l10n(_ instance: ShuftiPro.L10n = .shared, minIntegerDigits: Swift.Int) -> Swift.String
}
public protocol FloatingPointLocalizable : ShuftiPro.NumericLocalizable {
}
extension ShuftiPro.FloatingPointLocalizable {
  public func l10n(_ instance: ShuftiPro.L10n = .shared, fractionDigits: Swift.Int) -> Swift.String
}
extension Swift.Int8 : ShuftiPro.NSNumberRepresentable, ShuftiPro.IntegerLocalizable {
  public func asNSNumber() -> Foundation.NSNumber
}
extension Swift.UInt8 : ShuftiPro.NSNumberRepresentable, ShuftiPro.IntegerLocalizable {
  public func asNSNumber() -> Foundation.NSNumber
}
extension Swift.Int16 : ShuftiPro.NSNumberRepresentable, ShuftiPro.IntegerLocalizable {
  public func asNSNumber() -> Foundation.NSNumber
}
extension Swift.UInt16 : ShuftiPro.NSNumberRepresentable, ShuftiPro.IntegerLocalizable {
  public func asNSNumber() -> Foundation.NSNumber
}
extension Swift.Int32 : ShuftiPro.NSNumberRepresentable, ShuftiPro.IntegerLocalizable {
  public func asNSNumber() -> Foundation.NSNumber
}
extension Swift.UInt32 : ShuftiPro.NSNumberRepresentable, ShuftiPro.IntegerLocalizable {
  public func asNSNumber() -> Foundation.NSNumber
}
extension Swift.Int64 : ShuftiPro.NSNumberRepresentable, ShuftiPro.IntegerLocalizable {
  public func asNSNumber() -> Foundation.NSNumber
}
extension Swift.Int : ShuftiPro.NSNumberRepresentable, ShuftiPro.IntegerLocalizable {
  public func asNSNumber() -> Foundation.NSNumber
}
extension Swift.UInt : ShuftiPro.NSNumberRepresentable, ShuftiPro.IntegerLocalizable {
  public func asNSNumber() -> Foundation.NSNumber
}
extension Swift.Float : ShuftiPro.NSNumberRepresentable, ShuftiPro.FloatingPointLocalizable {
  public func asNSNumber() -> Foundation.NSNumber
}
extension Swift.Double : ShuftiPro.NSNumberRepresentable, ShuftiPro.FloatingPointLocalizable {
  public func asNSNumber() -> Foundation.NSNumber
}
@_hasMissingDesignatedInitializers public class UIUtilities {
  public static func imageOrientation(fromDevicePosition devicePosition: AVFoundation.AVCaptureDevice.Position = .back) -> UIKit.UIImage.Orientation
  @objc deinit
}
public protocol IBL10n {
}
extension ShuftiPro.IBL10n {
  public func messageForSetOnlyProperty(_ property: Swift.String = #function) -> Swift.Never
}
extension ShuftiPro.L10n : Swift.Equatable {
  public static func == (lhs: ShuftiPro.L10n, rhs: ShuftiPro.L10n) -> Swift.Bool
}
extension UIKit.UILabel : ShuftiPro.IBL10n {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var l10nText: Swift.String {
    @objc get
    @objc set(newValue)
  }
}
extension UIKit.UITextField : ShuftiPro.IBL10n {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var l10nText: Swift.String {
    @objc get
    @objc set(newValue)
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var l10nPlaceholder: Swift.String {
    @objc get
    @objc set(newValue)
  }
}
public struct LocalizedStringsConfiguration {
  public static var shared: ShuftiPro.LocalizedStringsConfiguration
  public var isNonLocalized: Swift.Bool
  public var isDoubleLength: Swift.Bool {
    get
    set(value)
  }
  public var isAccented: Swift.Bool {
    get
    set(value)
  }
  public var isBounded: Swift.Bool {
    get
    set(value)
  }
  public var isForcedRightToLeft: Swift.Bool {
    get
    set(value)
  }
  public init(isNonLocalized: Swift.Bool = false, isDoubleLength: Swift.Bool = false, isAccented: Swift.Bool = false, isBounded: Swift.Bool = false, isForcedRightToLeft: Swift.Bool = false)
  public init(userDefaults: Foundation.UserDefaults)
}
extension UIKit.UIDatePicker : ShuftiPro.IBL10n {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var l10nUseCurrentLocale: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
}
@_hasMissingDesignatedInitializers public class Reachability {
  @objc deinit
}
extension UIKit.UISearchBar : ShuftiPro.IBL10n {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var l10nText: Swift.String {
    @objc get
    @objc set(newValue)
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var l10nPrompt: Swift.String {
    @objc get
    @objc set(newValue)
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var l10nPlaceholder: Swift.String {
    @objc get
    @objc set(newValue)
  }
}
extension UIKit.UIViewController : ShuftiPro.IBL10n {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var l10nTitle: Swift.String {
    @objc get
    @objc set(newValue)
  }
}
extension UIKit.UITabBarItem {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var l10nBadge: Swift.String {
    @objc get
    @objc set(newValue)
  }
}
public protocol Logger {
  var format: Swift.String { get }
  func log(_ message: Swift.String)
}
extension ShuftiPro.Logger {
  public var format: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class ShuftiPro : ObjectiveC.NSObject {
  public var async: Swift.String
  public var verificationMode: Swift.String
  public var statusBarColor: Swift.String?
  public var topBarTintColor: Swift.String?
  public var cancelButtonTextColor: Swift.String?
  public var showNavBar: Swift.Bool
  @objc public func shuftiProVerification(requestObject dataObjectObj: [Swift.String : Any], authKeys: [Swift.String : Swift.String], parentVC pvc: UIKit.UIViewController, configs: [Swift.String : Any]?, completion: @escaping (_ result: Any) -> ())
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIImage {
  public convenience init?(pixelBuffer: CoreVideo.CVPixelBuffer)
  public func scaledImage(with size: CoreGraphics.CGSize) -> UIKit.UIImage?
}
public enum Constant {
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static var modelName: Swift.String
}
extension UIKit.UINavigationItem : ShuftiPro.IBL10n {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var l10nTitle: Swift.String {
    @objc get
    @objc set(newValue)
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var l10nPrompt: Swift.String {
    @objc get
    @objc set(newValue)
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var l10nBackButton: Swift.String {
    @objc get
    @objc set(newValue)
  }
}
extension Swift.String : ShuftiPro.Localizable {
  public func l10n(_ instance: ShuftiPro.L10n) -> Swift.String
  public func l10n(_ instance: ShuftiPro.L10n = .shared, resource: Swift.String? = nil, fittingWidth: Swift.Int? = nil) -> Swift.String
  public func l10n(_ instance: ShuftiPro.L10n = .shared, resource: Swift.String? = nil, fittingWidth: Swift.Int? = nil, _ arg: Swift.CVarArg) -> Swift.String
  public func l10n(_ instance: ShuftiPro.L10n = .shared, resource: Swift.String? = nil, fittingWidth: Swift.Int? = nil, args: [Swift.CVarArg]) -> Swift.String
  public func l10nPlural(_ instance: ShuftiPro.L10n = .shared, resource: Swift.String? = nil, fittingWidth: Swift.Int? = nil, _ arg: Swift.CVarArg) -> Swift.String
  public func l10nPlural(_ instance: ShuftiPro.L10n = .shared, resource: Swift.String? = nil, fittingWidth: Swift.Int? = nil, args: [Swift.CVarArg]) -> Swift.String
}
extension Swift.String {
  @available(*, deprecated, renamed: "l10nPlural(_:resource:fittingWidth:_:)")
  public func l10n<Number>(_ instance: ShuftiPro.L10n = .shared, resource: Swift.String? = nil, fittingWidth: Swift.Int? = nil, arg: Number, converting: @escaping (_ number: Number) -> Swift.CVarArg = { $0 }) -> Swift.String where Number : Swift.CVarArg, Number : Swift.Numeric
}
extension ShuftiPro.L10n : ShuftiPro.Localizable {
  public func l10n(_ instance: ShuftiPro.L10n) -> Swift.String
}
extension ShuftiPro.L10n : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension UIKit.UIButton : ShuftiPro.IBL10n {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var l10nTitle: Swift.String {
    @objc get
    @objc set(newValue)
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var l10nHighlightedTitle: Swift.String {
    @objc get
    @objc set(newValue)
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var l10nSelectedTitle: Swift.String {
    @objc get
    @objc set(newValue)
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic public var l10nDisabledTitle: Swift.String {
    @objc get
    @objc set(newValue)
  }
}
public protocol PluralArg : Swift.CVarArg {
  var arg: Swift.CVarArg { get }
  var value: Foundation.NSNumber { get }
  var convertedArg: Swift.CVarArg { get }
}
extension ShuftiPro.PluralArg {
  public var convertedArg: Swift.CVarArg {
    get
  }
  public var _cVarArgEncoding: [Swift.Int] {
    get
  }
}
extension Foundation.Date : ShuftiPro.Localizable {
  public func l10n(_ instance: ShuftiPro.L10n) -> Swift.String
  public func l10n(_ instance: ShuftiPro.L10n, formattingContext: Foundation.Formatter.Context?) -> Swift.String
  public func l10n(_ instance: ShuftiPro.L10n = .shared, dateStyle: Foundation.DateFormatter.Style, formattingContext: Foundation.Formatter.Context? = nil) -> Swift.String
  public func l10n(_ instance: ShuftiPro.L10n = .shared, timeStyle: Foundation.DateFormatter.Style, formattingContext: Foundation.Formatter.Context? = nil) -> Swift.String
  public func l10n(_ instance: ShuftiPro.L10n = .shared, dateStyle: Foundation.DateFormatter.Style, timeStyle: Foundation.DateFormatter.Style, formattingContext: Foundation.Formatter.Context? = nil) -> Swift.String
  public func l10n(_ instance: ShuftiPro.L10n = .shared, template: Swift.String, formattingContext: Foundation.Formatter.Context? = nil) -> Swift.String
  public func l10n(_ instance: ShuftiPro.L10n = .shared, format: Swift.String, formattingContext: Foundation.Formatter.Context? = nil) -> Swift.String
  public func l10n(_ instance: ShuftiPro.L10n = .shared, closure: (_ formatter: Foundation.DateFormatter) -> Swift.Void) -> Swift.String
}
